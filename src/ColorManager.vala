/* Generated by vala-dbus-binding-tool 1.0-aa2fb. Do not modify! */
/* Generated with: vala-dbus-binding-tool --api-path=ColorManager.xml */
using GLib;

namespace org {

	namespace freedesktop {

		[DBus (name = "org.freedesktop.ColorManager", timeout = 120000)]
		public interface ColorManager : GLib.Object {

			[DBus (name = "GetDevices")]
			public abstract GLib.ObjectPath[] get_devices() throws DBusError, IOError;

			[DBus (name = "GetDevicesByKind")]
			public abstract GLib.ObjectPath[] get_devices_by_kind(string kind) throws DBusError, IOError;

			[DBus (name = "FindDeviceById")]
			public abstract GLib.ObjectPath find_device_by_id(string device_id) throws DBusError, IOError;

			[DBus (name = "FindSensorById")]
			public abstract GLib.ObjectPath find_sensor_by_id(string sensor_id) throws DBusError, IOError;

			[DBus (name = "FindDeviceByProperty")]
			public abstract GLib.ObjectPath find_device_by_property(string key, string value) throws DBusError, IOError;

			[DBus (name = "FindProfileById")]
			public abstract GLib.ObjectPath find_profile_by_id(string profile_id) throws DBusError, IOError;

			[DBus (name = "FindProfileByProperty")]
			public abstract GLib.ObjectPath find_profile_by_property(string key, string value) throws DBusError, IOError;

			[DBus (name = "FindProfileByFilename")]
			public abstract GLib.ObjectPath find_profile_by_filename(string filename) throws DBusError, IOError;

			[DBus (name = "GetStandardSpace")]
			public abstract GLib.ObjectPath get_standard_space(string standard_space) throws DBusError, IOError;

			[DBus (name = "GetProfiles")]
			public abstract GLib.ObjectPath[] get_profiles() throws DBusError, IOError;

			[DBus (name = "GetSensors")]
			public abstract GLib.ObjectPath[] get_sensors() throws DBusError, IOError;

			[DBus (name = "GetProfilesByKind")]
			public abstract GLib.ObjectPath[] get_profiles_by_kind(string kind) throws DBusError, IOError;

			[DBus (name = "CreateProfile")]
			public abstract GLib.ObjectPath create_profile(string profile_id, string scope, GLib.HashTable<string, string> properties) throws DBusError, IOError;

			[DBus (name = "CreateDevice")]
			public abstract GLib.ObjectPath create_device(string device_id, string scope, GLib.HashTable<string, string> properties) throws DBusError, IOError;

			[DBus (name = "DeleteDevice")]
			public abstract void delete_device(GLib.ObjectPath object_path) throws DBusError, IOError;

			[DBus (name = "DeleteProfile")]
			public abstract void delete_profile(GLib.ObjectPath object_path) throws DBusError, IOError;

			[DBus (name = "Changed")]
			public signal void changed();

			[DBus (name = "DeviceAdded")]
			public signal void device_added(GLib.ObjectPath object_path);

			[DBus (name = "DeviceRemoved")]
			public signal void device_removed(GLib.ObjectPath object_path);

			[DBus (name = "DeviceChanged")]
			public signal void device_changed(GLib.ObjectPath object_path);

			[DBus (name = "ProfileAdded")]
			public signal void profile_added(GLib.ObjectPath object_path);

			[DBus (name = "ProfileRemoved")]
			public signal void profile_removed(GLib.ObjectPath object_path);

			[DBus (name = "SensorAdded")]
			public signal void sensor_added(GLib.ObjectPath object_path);

			[DBus (name = "SensorRemoved")]
			public signal void sensor_removed(GLib.ObjectPath object_path);

			[DBus (name = "ProfileChanged")]
			public signal void profile_changed(GLib.ObjectPath object_path);

			[DBus (name = "DaemonVersion")]
			public abstract string daemon_version { owned get; }

			[DBus (name = "SystemVendor")]
			public abstract string system_vendor { owned get; }

			[DBus (name = "SystemModel")]
			public abstract string system_model { owned get; }
		}

		[DBus (name = "org.freedesktop.ColorManager", timeout = 120000)]
		public interface ColorManagerSync : GLib.Object {

			[DBus (name = "GetDevices")]
			public abstract GLib.ObjectPath[] get_devices() throws DBusError, IOError;

			[DBus (name = "GetDevicesByKind")]
			public abstract GLib.ObjectPath[] get_devices_by_kind(string kind) throws DBusError, IOError;

			[DBus (name = "FindDeviceById")]
			public abstract GLib.ObjectPath find_device_by_id(string device_id) throws DBusError, IOError;

			[DBus (name = "FindSensorById")]
			public abstract GLib.ObjectPath find_sensor_by_id(string sensor_id) throws DBusError, IOError;

			[DBus (name = "FindDeviceByProperty")]
			public abstract GLib.ObjectPath find_device_by_property(string key, string value) throws DBusError, IOError;

			[DBus (name = "FindProfileById")]
			public abstract GLib.ObjectPath find_profile_by_id(string profile_id) throws DBusError, IOError;

			[DBus (name = "FindProfileByProperty")]
			public abstract GLib.ObjectPath find_profile_by_property(string key, string value) throws DBusError, IOError;

			[DBus (name = "FindProfileByFilename")]
			public abstract GLib.ObjectPath find_profile_by_filename(string filename) throws DBusError, IOError;

			[DBus (name = "GetStandardSpace")]
			public abstract GLib.ObjectPath get_standard_space(string standard_space) throws DBusError, IOError;

			[DBus (name = "GetProfiles")]
			public abstract GLib.ObjectPath[] get_profiles() throws DBusError, IOError;

			[DBus (name = "GetSensors")]
			public abstract GLib.ObjectPath[] get_sensors() throws DBusError, IOError;

			[DBus (name = "GetProfilesByKind")]
			public abstract GLib.ObjectPath[] get_profiles_by_kind(string kind) throws DBusError, IOError;

			[DBus (name = "CreateProfile")]
			public abstract GLib.ObjectPath create_profile(string profile_id, string scope, GLib.HashTable<string, string> properties) throws DBusError, IOError;

			[DBus (name = "CreateDevice")]
			public abstract GLib.ObjectPath create_device(string device_id, string scope, GLib.HashTable<string, string> properties) throws DBusError, IOError;

			[DBus (name = "DeleteDevice")]
			public abstract void delete_device(GLib.ObjectPath object_path) throws DBusError, IOError;

			[DBus (name = "DeleteProfile")]
			public abstract void delete_profile(GLib.ObjectPath object_path) throws DBusError, IOError;

			[DBus (name = "Changed")]
			public signal void changed();

			[DBus (name = "DeviceAdded")]
			public signal void device_added(GLib.ObjectPath object_path);

			[DBus (name = "DeviceRemoved")]
			public signal void device_removed(GLib.ObjectPath object_path);

			[DBus (name = "DeviceChanged")]
			public signal void device_changed(GLib.ObjectPath object_path);

			[DBus (name = "ProfileAdded")]
			public signal void profile_added(GLib.ObjectPath object_path);

			[DBus (name = "ProfileRemoved")]
			public signal void profile_removed(GLib.ObjectPath object_path);

			[DBus (name = "SensorAdded")]
			public signal void sensor_added(GLib.ObjectPath object_path);

			[DBus (name = "SensorRemoved")]
			public signal void sensor_removed(GLib.ObjectPath object_path);

			[DBus (name = "ProfileChanged")]
			public signal void profile_changed(GLib.ObjectPath object_path);

			[DBus (name = "DaemonVersion")]
			public abstract string daemon_version { owned get; }

			[DBus (name = "SystemVendor")]
			public abstract string system_vendor { owned get; }

			[DBus (name = "SystemModel")]
			public abstract string system_model { owned get; }
		}
	}
}
